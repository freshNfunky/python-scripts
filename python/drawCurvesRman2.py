# drawCurvesRman2.py
#-----------------------------------------------------------
# Reads files written by queryParticles and generates
# curves that represent each particle's individual path
#-----------------------------------------------------------
# Chance Payne and Kyle Nikolich
# April 2009

import os
import linecache
import maya.mel as mel

# Creates curves based on array generated in readFiles
def drawRmanCurves(readPart, pNum, rManPath):
	
	# Begin creating curve mel statement
	buildCurve = 'Basis "catmull-rom" 1 "catmull-rom" 1\n'
	buildCurve += 'Curves "cubic" [%d] "nonperiodic"' % (len(readPart))
	
	
	# Begin creating curve mel statement
	buildCurve += '"P" [\n'
	
	# Add positions
	for n in range ( len(readPart) ):
		buildCurve += " %s \n" % readPart[n]
	
	buildCurve += "]\n"
	buildCurve += '"constantwidth" [0.01]\n'
	
	ribPath = (rManPath + "%s" + ".rib") % pNum
	fout = open(ribPath, 'w')
	fout.write(buildCurve)
	fout.close()
	

# Create a master rib file to render from, homie G
def createRenderRibs(ribPath, numFiles):
	ribFile = 'Option "searchpath" "shader" "@:../shaders"\n'
	ribFile += 'Option "searchpath" "texture" "../textures"\n'
	ribFile += 'Option "searchpath" "archive" "../archives:Cutter_Help/templates/Rib:custom_templates/Rib"\n'
	ribFile += '\n'
	ribFile += '\n'
	ribFile += '# Note the use of this Hider to improve the rendering of\n'
	ribFile += '# the curves\n'
	ribFile += 'Hider "stochastic" "int sigma" [1] "float sigmablur" [1.0]\n'
	ribFile += 'Display "untitled" "it" "rgb"\n'
	ribFile += 'Format 800 800 1\n'
	ribFile += 'Projection "perspective" "fov" 20\n'
	ribFile += 'ShadingRate 1\n'
	ribFile += '\n'
	ribFile += 'LightSource "distantlight" 1 "intensity" 1.5 "from" [0 0 0] "to" [0 0 1]\n'
	ribFile += '\n'
	ribFile += 'Translate  0 -0.75 40\n'
	ribFile += 'Rotate -30 1 0 0\n'
	ribFile += 'Rotate 90   0 1 0\n'
	ribFile += 'Scale 1 1 -1\n'
	ribFile += 'WorldBegin\n'
	ribFile += '\tTransformBegin\n'
	ribFile += '\t\t#LightSource "pointlight" 2 "intensity" 25 "from" [1 4 1]\n'
	ribFile += '\tTransformEnd\n'
	ribFile += '\t#Surface "/stuhome/VSFX705/cutter/sparky" "Kfb" 2 "age" 1\n'
	ribFile += '\tSurface "plastic" "Ks" 0.50 "Kd" 0.50 "Ka" 1.0 "roughness" 0.10 "specularcolor" [1.0 1.0 1.0]\n'
	ribFile += '\tAttributeBegin\n'
	ribFile += '\t\tAttribute "dice" "hair" [1]\n'
	ribFile += '\t\tAttribute "stochastic" "int sigma" [1]\n'
	
	for n in range(numFiles):
		#for line in path.numFiles >= 8
		#create ribArchive line
		currentFile = open((("%s%s.rib") % (ribPath,n)), 'r')
		numLines = currentFile.readlines()
		
		if len(numLines) >= 8:
			ribFile += ('\t\tReadArchive "%s%s.rib"\n') % (ribPath,n)
		else:
			ribFile += ""
			
	ribFile += '\tAttributeEnd\n'
	ribFile += 'WorldEnd\n'
	
	renderRibsPath = ("%s" + "renderRibs2.rib") % ribPath
	
	fout = open(renderRibsPath, 'w')
	fout.write(ribFile)
	fout.close()
	
	


# Creates an array of position information read from
# files generated by getPositions within queryParticles.py
def readFiles (path, pNum):

	#Set path based on particle number
	pPath = path + "/particles/particleNum" + str(pNum) + ".mel"
	rManPath = path + "/rmanCurves/rManCurve"
	# Open file for reading based on path, read content
	filePart = open(pPath, 'r')
	fileLength = len(filePart.readlines())
	
	# Initialize counter for getLine command
	line = 0
	
	# Initialize array for storing point positions
	readPart = []
	
	# Cycle through individual particle files
	# Read each line to get position information
	for n in range(fileLength):
		
		line = n + 1
		readPart.append(linecache.getline(pPath, line))
		
		# Remove end of line character from entry
		if readPart[n][-1] == '\n':
			 readPart[n] = readPart[n][:-1]
		
		# Clear cache for future values
		linecache.clearcache()
	
	# Call on drawRmanCurves to generate curves, pass array
	drawRmanCurves(readPart, pNum, rManPath)


# Main procedure called to read data and generate curves
def masterControl (path):
	
	pPath = path + "/particles"
	
	# Returns number of files within a directory
	num = os.listdir(pPath)
	numFiles = len(num)	
	
	# Call to readFiles for each file in the directory
	for n in range(numFiles):
		readFiles(path, n)
	
	ribPath = ("%s/rmanCurves/rManCurve") % path
	
	# Call to createRenderRibs to construct a master rib file
	# Search each file, if > 8 lines, add to counter
	createRenderRibs(ribPath, numFiles)
		
	
# Call masterControl to get this party started	
#masterControl()
